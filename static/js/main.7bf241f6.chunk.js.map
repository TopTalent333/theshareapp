{"version":3,"sources":["state/hooks.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","contexts/ThemeContext.tsx","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","utils/translateTextHelpers.ts","hooks/useI18n.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/types.ts","config/constants/pools.ts","config/constants/contracts.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","config/constants/nfts.ts","views/Nft/components/NftGlobalNotification.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts","contexts/Localisation/translationsContext.ts"],"names":["ZERO","BigNumber","useFetchPublicData","dispatch","useDispatch","slowRefresh","useRefresh","useEffect","fetchFarmsPublicDataAsync","useFarms","useSelector","state","farms","data","useFarmFromPid","pid","find","f","useFarmUser","farm","allowance","userData","tokenBalance","stakedBalance","earnings","usePriceBnbBusd","tokenPriceVsQuote","usePriceCakeBusd","usePriceCakeBnb","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","div","pow","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","fetchFarmUserAllowances","account","masterChefAdress","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","fetchFarmUserEarnings","rawEarnings","parsedEarnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","action","liveFarmsData","payload","liveFarmData","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","actions","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","CACHE_KEY","ThemeContext","React","createContext","isDark","toggleTheme","ThemeContextProvider","children","useState","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","Provider","value","prevState","setItem","stringify","theme","dark","light","nodes","process","getNodeUrl","randomIndex","random","length","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","useContext","fastRefresh","variableRegex","getTranslation","translations","translationId","fallback","foundTranslation","translation","stringId","translatedString","text","includes","stringToReplace","exec","fallbackValueAtIndex","split","replace","replaceDynamicString","useI18n","TranslationsContext","Container","styled","mediaQueries","sm","Page","lg","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","i","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","PoolCategory","pools","busd","nonBnbPools","poolsConfig","filter","p","stakingTokenName","BNB","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingEgg","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","EN","code","language","allLanguages","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","setTranslations","storedLangCode","storedLang","getStoredLang","console","log","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","RABBIT_MINTING_FARM_ADDRESS","ModalContent","Actions","NftYouWonModal","onDismiss","TranslateString","title","src","alt","style","height","marginBottom","size","color","as","NftGlobalNotification","useModal","onPresentBurnModal","showModal","useRef","checkNftStatus","rabbitmintingfarm","totalSupplyDistributedArr","currentDistributedSupplyArr","canClaimArr","hasClaimedArr","totalSupplyDistributed","currentDistributedSupply","canClaim","hasClaimed","lt","current","document","location","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","block","setBlock","getBlockNumber","blockNumber","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions","defaultTranslationState"],"mappings":"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","file":"static/js/main.7bf241f6.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 0 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 1 // EGG-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\nexport const usePriceCakeBnb = (): BigNumber => {\n  // const pid = 1 // CAKE-BNB LP\n  // const bnbPriceUSD = usePriceBnbBusd()\n  // const farm = useFarmFromPid(pid)\n  // return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  const pid = 1 // EGG-BUSD LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n  const cakePrice = usePriceCakeBusd()\n  let value = new BigNumber(0)\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = bnbPrice.times(farm.lpTotalInQuoteToken)\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = cakePrice.times(farm.lpTotalInQuoteToken)\n      } else {\n        val = farm.lpTotalInQuoteToken\n      }\n      value = value.plus(val)\n    }\n  }\n  return value\n}\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n      }\n\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'eggPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingEgg',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\n\nconst variableRegex = /%(.*?)%/\n\nconst replaceDynamicString = (foundTranslation: string, fallback: string) => {\n  const stringToReplace = variableRegex.exec(foundTranslation)[0]\n  // const indexToReplace = foundTranslation.split(' ').indexOf(stringToReplace)\n  const fallbackValueAtIndex = fallback.split(' ')[0]\n  return foundTranslation.replace(stringToReplace, fallbackValueAtIndex)\n}\n\nexport const getTranslation = (translations: Array<any>, translationId: number, fallback: string) => {\n  const foundTranslation = translations.find((translation) => {\n    return translation.data.stringId === translationId\n  })\n  if (foundTranslation) {\n    const translatedString = foundTranslation.data.text\n    const includesVariable = translatedString.includes('%')\n    if (includesVariable) {\n      return replaceDynamicString(translatedString, fallback)\n    }\n    return translatedString\n  }\n  return fallback\n}\n\n// TODO: Replace instances where this is called directly with the \"useI18n\" hook.\n// Using this directly can lead to errors because \"useContext\" is not preserved between renders\n// @see https://reactjs.org/docs/hooks-rules.html\nexport const TranslateString = (translationId: number, fallback: string) => {\n  const { translations } = useContext(TranslationsContext)\n  if (translations[0] === 'error') {\n    return fallback\n  }\n  if (translations.length > 0) {\n    return getTranslation(translations, translationId, fallback)\n  }\n  return fallback\n}\n","import { useContext } from 'react'\nimport { TranslationsContext } from '../contexts/Localisation/translationsContext'\nimport { getTranslation } from '../utils/translateTextHelpers'\n\nconst useI18n = () => {\n  const { translations } = useContext(TranslationsContext)\n\n  return (translationId: number, fallback: string) => {\n    if (translations[0] === 'error') {\n      return fallback\n    }\n    if (translations.length > 0) {\n      return getTranslation(translations, translationId, fallback)\n    }\n    return fallback\n  }\n}\n\nexport default useI18n\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    56: '0x347816627bb565eaD69475f41DF1403016b807f2',\n    97: '',\n  },\n  masterChef: {\n    56: '0xC74CDF1E1cd26cC827F247BC8A0033C4690175e3',\n    97: '',\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '',\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n  },\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingEgg('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 1,\n    risk: 10,\n    lpSymbol: 'GOOSE-BNB LP',\n    lpAddresses: {\n      97: '',\n      56: '0xbe7dd082da7269ea48e99fdd70b74e3ffdd50883', // to-do may-20\n    },\n    tokenSymbol: 'GOOSE',\n    tokenAddresses: {\n      97: '',\n      56: '0x347816627bb565eaD69475f41DF1403016b807f2',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 0,\n    risk: 2,\n    lpSymbol: 'BNB-BUSD LP',\n    lpAddresses: {\n      97: '',\n      56: '0x1b96b92314c44b159149f7e0303511fb2fc4774f',\n    },\n    tokenSymbol: 'BNB',\n    tokenAddresses: {\n      97: '',\n      56: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: #ffffff!important;\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\n/* ${({ theme }) => theme.colors.background */\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`)\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then((r) => r.json())\n        // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error('ERROR')\n          console.error(e)\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n\n  {\n    label: 'Exchange',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Swap',\n        href: 'https://app.uniswap.org/#/swap',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://app.uniswap.org/#/pool',\n      },\n    ],\n  },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  // {\n  //   label: 'Info',\n  //   icon: 'MoreIcon',\n  //   items: [\n  //     // {\n  //     //   label: 'Github',\n  //     //   href: 'https://github.com/gooseswap',\n  //     // },\n  //     {\n  //       label: 'Contract',\n  //       href: 'https://bscscan.com/address/0x347816627bb565eaD69475f41DF1403016b807f2#code',\n  //     },\n  //     {\n  //       label: 'Liquidity',\n  //       href: 'https://bscscan.com/address/0xbe7dd082da7269ea48e99fdd70b74e3ffdd50883',\n  //     },\n  //     {\n  //       label: 'WhitePaper',\n  //       href: 'https://github.com/gooseswap/goose-frontend/blob/main/WhitePaper.pdf',\n  //     },\n  //   ],\n  // },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceBnbBusd, usePriceCakeBnb } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceBnbBusd().toNumber() * usePriceCakeBnb().toNumber()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd}\n      links={config}\n      priceLink=\"https://charts.bogged.finance/?token=0x347816627bb565eaD69475f41DF1403016b807f2\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import { Nft } from './types'\n\nexport const RABBIT_MINTING_FARM_ADDRESS = '0x7c8b60d2b859a38c8B9b5B6CB4565485cb637c7a'\nexport const PANCAKE_RABBITS_ADDRESS = '0xDf7952B35f24aCF7fC0487D01c8d5690a60DBa07'\n\nconst Nfts: Nft[] = [\n  {\n    name: 'Swapsies',\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\n    previewImage: 'swapsies-preview.png',\n    blurImage: 'swapsies-blur.png',\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Drizzle',\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\n    previewImage: 'drizzle-preview.png',\n    blurImage: 'drizzle-blur.png',\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Blueberries',\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\n    previewImage: 'blueberries-preview.png',\n    blurImage: 'blueberries-blur.png',\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Circular',\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\n    previewImage: 'circular-preview.png',\n    blurImage: 'circular-blur.png',\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Sparkle',\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\n    originalImage: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\n    previewImage: 'sparkle-preview.png',\n    blurImage: 'sparkle-blur.png',\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n]\n\nexport default Nfts\n","import React, { useEffect, useRef } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Button, Heading, Modal, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport rabbitmintingfarm from 'config/abi/rabbitmintingfarm.json'\nimport { RABBIT_MINTING_FARM_ADDRESS } from 'config/constants/nfts'\nimport multicall from 'utils/multicall'\n\ninterface NftYouWonModalProps {\n  onDismiss?: () => void\n}\n\nconst ModalContent = styled.div`\n  padding: 24px;\n  text-align: center;\n`\n\nconst Actions = styled.div`\n  text-align: center;\n`\n\nconst NftYouWonModal: React.FC<NftYouWonModalProps> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n  return (\n    <Modal title={TranslateString(999, 'Congratulations!')} onDismiss={onDismiss}>\n      <ModalContent>\n        <img src=\"/images/present.svg\" alt=\"You won present\" style={{ height: '64px', marginBottom: '24px' }} />\n        <Heading size=\"lg\" color=\"secondary\">\n          {TranslateString(999, 'You won an NFT!')}\n        </Heading>\n      </ModalContent>\n      <Actions>\n        <Button as=\"a\" href=\"/nft\">\n          {TranslateString(999, 'Go to claim NFT')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\n/**\n * 1. Checks if nft supply available\n * 2. If supply is available check if the user can claim\n * 3. If the user can claim show a modal\n */\nconst NftGlobalNotification = () => {\n  const { account } = useWallet()\n  const [onPresentBurnModal] = useModal(<NftYouWonModal />)\n  const showModal = useRef(() => onPresentBurnModal())\n\n  useEffect(() => {\n    const checkNftStatus = async () => {\n      const [totalSupplyDistributedArr, currentDistributedSupplyArr, canClaimArr, hasClaimedArr] = await multicall(\n        rabbitmintingfarm,\n        [\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'totalSupplyDistributed' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'currentDistributedSupply' },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'canClaim', params: [account] },\n          { address: RABBIT_MINTING_FARM_ADDRESS, name: 'hasClaimed', params: [account] },\n        ],\n      )\n\n      // TODO: Figure out why these values are coming back as an array\n      const [totalSupplyDistributed]: [BigNumber] = totalSupplyDistributedArr\n      const [currentDistributedSupply]: [BigNumber] = currentDistributedSupplyArr\n      const [canClaim]: [boolean] = canClaimArr\n      const [hasClaimed]: [boolean] = hasClaimedArr\n\n      if (currentDistributedSupply.lt(totalSupplyDistributed) && canClaim && !hasClaimed) {\n        showModal.current()\n      }\n    }\n\n    if (account && !document.location.href.includes('/nft')) {\n      checkNftStatus()\n    }\n  }, [account, showModal])\n\n  return <div />\n}\n\nexport default NftGlobalNotification\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode />\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      <NftGlobalNotification />\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID)\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n"],"sourceRoot":""}